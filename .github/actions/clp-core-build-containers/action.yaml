name: "clp-core-build-containers"
description: "Builds and publishes container images for CLP-core's dependencies"

inputs:
  os_name:
    description: "Name of container OS"
    required: true
  clp_core_dir:
    description: "CLP-core's component directory"
    required: true
  push_deps_image:
    description: "Whether to publish a container image containing CLP's dependencies"
    required: true
  token:
    description: "Registry token"
    required: true

runs:
  using: "composite"
  steps:
    - uses: "docker/setup-buildx-action@v3"

    - if: "inputs.push_deps_image == 'true'"
      uses: "docker/login-action@v3"
      with:
        registry: "ghcr.io"
        username: "${{github.actor}}"
        password: "${{inputs.token}}"

    - id: "get_image_props"
      shell: "bash"
      run: |
        # Docker doesn't support repository names with uppercase characters, so we convert to
        # lowercase here.
        repository=$(echo '${{github.repository}}' | tr '[:upper:]' '[:lower:]')
        container_name="clp-core-dependencies-x86-${{inputs.os_name}}"
        image_path="/tmp/image.tar"
        echo "IMAGE_PATH=${image_path}" >> "$GITHUB_OUTPUT"
        if [[ "${{inputs.push_deps_image}}" == "true" ]] ; then
          echo "NAME=ghcr.io/${repository}/${container_name}" >> "$GITHUB_OUTPUT"
          echo "BRANCH=${{github.ref_name}}" >> "$GITHUB_OUTPUT"
          echo "OUTPUT=type=registry" >> "$GITHUB_OUTPUT"
        else
          echo "NAME=${container_name}" >> "$GITHUB_OUTPUT"
          echo "BRANCH=latest" >> "$GITHUB_OUTPUT"
          echo "OUTPUT=type=docker,dest=${image_path}" >> "$GITHUB_OUTPUT"
        fi

    - id: "deps_image_meta"
      uses: "docker/metadata-action@v5"
      with:
        images: "${{steps.get_image_props.outputs.NAME}}"
        tags: |
          type=raw,value=${{steps.get_image_props.outputs.BRANCH}}

    - uses: "docker/build-push-action@v5"
      with:
        context: "${{inputs.clp_core_dir}}"
        file: "${{inputs.clp_core_dir}}/tools/docker-images/clp-env-base-${{inputs.os_name}}\
          /Dockerfile"
        labels: "${{steps.deps_image_meta.outputs.labels}}"
        tags: "${{steps.deps_image_meta.outputs.tags}}"
        outputs: "${{steps.get_image_props.outputs.OUTPUT}}"

    - if: "inputs.push_deps_image == 'false'"
      uses: "actions/upload-artifact@v4"
      with:
        name: "${{steps.get_image_props.outputs.NAME}}"
        path: "${{steps.get_image_props.outputs.IMAGE_PATH}}"
        retention-days: 1
